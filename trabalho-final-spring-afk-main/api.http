### Testes da API de Gerenciamento de Eventos Acadêmicos

### 1. TESTE INICIAL - Verificar se a API está rodando
GET http://localhost:8080
Accept: application/json

###

### 2. DEPARTAMENTOS

### 2.1 Criar Departamento
POST http://localhost:8080/departments
Content-Type: application/json

{
  "nome": "Departamento de Ciência da Computação",
  "sigla": "DCC",
  "responsavel": "Prof. João Silva"
}

###

### 2.2 Criar outro Departamento
POST http://localhost:8080/departments
Content-Type: application/json

{
  "nome": "Departamento de Engenharia",
  "sigla": "DENG",
  "responsavel": "Prof. Maria Santos"
}

###

### 2.3 Listar todos os Departamentos
GET http://localhost:8080/departments
Accept: application/json

###

### 2.4 Buscar Departamento por ID
GET http://localhost:8080/departments/1
Accept: application/json

###

### 3. PALESTRANTES

### 3.1 Criar Palestrante
POST http://localhost:8080/speakers
Content-Type: application/json

{
  "nome": "Dr. Ana Costa",
  "miniCurriculo": "Doutora em Inteligência Artificial com 15 anos de experiência",
  "instituicao": "Universidade Federal de São Paulo"
}

###

### 3.2 Criar outro Palestrante
POST http://localhost:8080/speakers
Content-Type: application/json

{
  "nome": "Prof. Carlos Lima",
  "miniCurriculo": "Especialista em Desenvolvimento Web e Mobile",
  "instituicao": "Instituto de Tecnologia"
}

###

### 3.3 Listar todos os Palestrantes
GET http://localhost:8080/speakers
Accept: application/json

###

### 3.4 Buscar Palestrante por ID
GET http://localhost:8080/speakers/1
Accept: application/json

###

### 4. ALUNOS

### 4.1 Criar Aluno
POST http://localhost:8080/students
Content-Type: application/json

{
  "nome": "Pedro Oliveira",
  "matricula": "2021001",
  "curso": "Ciência da Computação"
}

###

### 4.2 Criar outro Aluno
POST http://localhost:8080/students
Content-Type: application/json

{
  "nome": "Julia Santos",
  "matricula": "2021002",
  "curso": "Engenharia de Software"
}

###

### 4.3 Criar terceiro Aluno
POST http://localhost:8080/students
Content-Type: application/json

{
  "nome": "Rafael Silva",
  "matricula": "2021003",
  "curso": "Sistemas de Informação"
}

###

### 4.4 Listar todos os Alunos
GET http://localhost:8080/students
Accept: application/json

###

### 4.5 Buscar Aluno por ID
GET http://localhost:8080/students/1
Accept: application/json

###

### 5. EVENTOS

### 5.1 Criar Evento
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Palestra: Inteligência Artificial no Futuro",
  "descricao": "Uma palestra sobre as tendências da IA para os próximos anos",
  "data": "2025-07-15T14:00:00",
  "limiteParticipantes": 50,
  "idDepartamento": 1,
  "idsPalestrantes": [1]
}

###

### 5.2 Criar outro Evento
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Workshop: Desenvolvimento Web Moderno",
  "descricao": "Workshop prático sobre tecnologias web atuais",
  "data": "2025-07-20T09:00:00",
  "limiteParticipantes": 30,
  "idDepartamento": 2,
  "idsPalestrantes": [2]
}

###

### 5.3 Criar Evento com múltiplos palestrantes
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Seminário: Tecnologia e Inovação",
  "descricao": "Seminário sobre inovação tecnológica com múltiplos palestrantes",
  "data": "2025-07-25T15:30:00",
  "limiteParticipantes": 100,
  "idDepartamento": 1,
  "idsPalestrantes": [1, 2]
}

###

### 5.4 Listar todos os Eventos
GET http://localhost:8080/events
Accept: application/json

###

### 5.5 Buscar Evento por ID
GET http://localhost:8080/events/1
Accept: application/json

###

### 6. INSCRIÇÕES

### 6.1 Inscrever Aluno no Evento
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 6.2 Inscrever outro Aluno no mesmo Evento
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 2
}

###

### 6.3 Inscrever Aluno em outro Evento
POST http://localhost:8080/events/2/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 6.4 Listar Inscrições de um Aluno
GET http://localhost:8080/students/1/registrations
Accept: application/json

###

### 6.5 Tentar inscrever o mesmo aluno no mesmo evento (deve falhar)
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 7. RELATÓRIOS

### 7.1 Gerar Relatório do Departamento
GET http://localhost:8080/departments/1/report
Accept: application/json

###

### 7.2 Gerar Relatório do outro Departamento
GET http://localhost:8080/departments/2/report
Accept: application/json

###

### 8. TESTES DE VALIDAÇÃO E REGRAS DE NEGÓCIO

### 8.1 Tentar criar evento sem palestrante (deve falhar)
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Evento sem palestrante",
  "descricao": "Este evento deve falhar",
  "data": "2025-08-01T10:00:00",
  "limiteParticipantes": 20,
  "idDepartamento": 1,
  "idsPalestrantes": []
}

###

### 8.2 Tentar inscrever em evento inexistente (deve falhar)
POST http://localhost:8080/events/999/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 8.3 Tentar inscrever aluno inexistente (deve falhar)
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 999
}

###

### 9. OPERAÇÕES DE ATUALIZAÇÃO

### 9.1 Atualizar Departamento
PUT http://localhost:8080/departments/1
Content-Type: application/json

{
  "nome": "Departamento de Ciência da Computação - Atualizado",
  "sigla": "DCC",
  "responsavel": "Prof. João Silva Neto"
}

###

### 9.2 Atualizar Palestrante
PUT http://localhost:8080/speakers/1
Content-Type: application/json

{
  "nome": "Dr. Ana Costa Silva",
  "miniCurriculo": "Doutora em Inteligência Artificial com 20 anos de experiência",
  "instituicao": "Universidade Federal de São Paulo"
}

###

### 9.3 Atualizar Aluno
PUT http://localhost:8080/students/1
Content-Type: application/json

{
  "nome": "Pedro Oliveira Santos",
  "matricula": "2021001",
  "curso": "Ciência da Computação"
}

###

### 9.4 Atualizar Evento
PUT http://localhost:8080/events/1
Content-Type: application/json

{
  "nome": "Palestra: Inteligência Artificial no Futuro - Atualizada",
  "descricao": "Uma palestra sobre as tendências da IA para os próximos anos com novos insights",
  "data": "2025-07-15T15:00:00",
  "limiteParticipantes": 60,
  "idDepartamento": 1,
  "idsPalestrantes": [1]
}

###

### 10. CANCELAMENTO DE INSCRIÇÃO

### 10.1 Cancelar uma inscrição (substitua o ID pela inscrição real)
DELETE http://localhost:8080/registrations/1

###

### 11. VERIFICAR ESTADO APÓS OPERAÇÕES

### 11.1 Verificar evento após cancelamento
GET http://localhost:8080/events/1
Accept: application/json

###

### 11.2 Verificar inscrições do aluno após cancelamento
GET http://localhost:8080/students/1/registrations
Accept: application/json

###

### 12. TESTES DE EXCLUSÃO

### 12.1 Tentar excluir palestrante vinculado a evento (deve falhar)
DELETE http://localhost:8080/speakers/1

###

### 12.2 Excluir um aluno
DELETE http://localhost:8080/students/3

###

### 12.3 Verificar se aluno foi excluído
GET http://localhost:8080/students/3
Accept: application/json

###